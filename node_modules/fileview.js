var jade = require('jade')
var path = require('path')
var fs = require('fs')

var filescanner = require('filescanner')

// for jade
var template_view = jade.compile([
    '- each file in files',
    '  tr',
	'    td',
	'      input(type="checkbox")',
	'    td(class="file_#{file.state}",data-path="#{file.path}") #{file.relativepath}',
	'    td #{file.state}'           
].join('\n'));

function FileView(ele){
	this.container = ele
	this.scanner = new filescanner.FileScanner()
	this.selectedfiles = []
	this.formatfiles = {}
	
}

FileView.prototype.init = function(){
	var self = this
	var putfile = function(e){
		var fileele = $(e.target)
		var file = fileele.parent().next().attr('data-path')
		if(e.target.checked == true){
			self.selectedfiles.push(file)
		}else{
			self.selectedfiles.splice(self.selectedfiles.indexOf(file))
		}
	}
	this.container.delegate("input","click",putfile)
}

FileView.prototype.update_view = function (dir_path) {
	this.clear()
	if(fs.existsSync(dir_path)){
		this.scanner.scan_dir(dir_path)
		this.files = this.scanner.filelist
		var files = this.files
		$.each(files,function(index,file){
			files[index].relativepath = path.relative(dir_path, file.path)
		})
		this.container.html(template_view({files:files}))
	}	
}

FileView.prototype.check_all = function(status){
	var checkboxes = this.container.find('input')
	$.each(checkboxes,function(i,v){
		$(v).click()
	})
}

FileView.prototype.clear = function(){
	this.filelist = []
	this.selectedfiles = []
	this.formatfiles = {}
	this.scanner.clear()
}

FileView.prototype.format_file = function(){
	var formatfiles = this.formatfiles
	$.each(this.selectedfiles,function(index,file){
		var keys = path.basename(file).split('.')[0].split("@")
		if(keys.length > 1){
			var mode = keys[1]
		}else{
			var mode = 'display'
		}
		var key = keys[0]

		var extname = path.extname(file).substr(1)
		if(!formatfiles[key]){
			formatfiles[key]={'mode':mode}
		}
		if(extname === 'groovy'){
			formatfiles[key]['code'] = fs.readFileSync(file,'utf-8')
		}else if (extname === 'ftl'){
			formatfiles[key].template = fs.readFileSync(file,'utf-8')
		}else if (extname === 'js'){
			formatfiles[key].script = fs.readFileSync(file,'utf-8')
		}else if (extname === 'widget'){
			var widgetfile = JSON.parse(fs.readFileSync(file,'utf-8'))
			if(widgetfile.layoutRule){
				formatfiles[key].layoutrule = widgetfile.layoutRule
			}else if(widgetfile.layoutName){
				formatfiles[key].layoutname = widgetfile.layoutName
			}
		}

	})
}

FileView.prototype.update_config = function(){
	var self = this
	$.each(this.selectedfiles,function(index,filename){
		self.scanner.config.sync_file(filename)
	})
	this.scanner.config.update_config()
	this.clear()
}



exports.FileView = FileView

